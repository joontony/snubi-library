/****************************************************************************************
 * File Name    : DateUtil.java
 * Function     :
 * Author       : 최명호
 * Tester       :
 * Page         :
 * Target       :
 * Description  :
 * Modification Log
 * ======================================================================================
 * Ver  Date        Author     Modification
 * ======================================================================================
   1.0  2018.05.02  최명호     	Create
   1.1	2020.05.25	최명호 		toStringIfNUllToday / toStringIfNUllBlank 추가
   1.2  2021.08.10	최명호 		getGapOfWeek/toCalendar/getDayOfWeek/getDayOfWeekToString
   1.3	2021.09.02	최명호 		getMondayOfWeek 추가
****************************************************************************************/
package org.snubi.lib.date;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;

import org.snubi.lib.misc.Misc;

public class DateUtil {

	final static String dayOfWeekS[] = {"","일","월","화","수","목","금","토"};

	public static  Map<String,String> getMondayOfWeek(boolean flagForSundayStart,Date target) {
//		DESC : 결과를 저장할 Map
		Map<String,String> mnapResult = new HashMap<String,String>();
		try {
//			DESC : 전달받은 Date 를 Calendar로 변경한다.
			Calendar clsCalendar = Calendar.getInstance(Locale.KOREA);
			clsCalendar.setTime(target);
			SimpleDateFormat clsSimpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
//			DESC : 오늘날짜
			mnapResult.put("BASE", clsSimpleDateFormat.format(clsCalendar.getTime()));
//			DESC : 월요일
			clsCalendar.add(Calendar.DATE, 2 - clsCalendar.get(Calendar.DAY_OF_WEEK));
			mnapResult.put("MON", clsSimpleDateFormat.format(clsCalendar.getTime()));
//			DESC : 일요일 파라미터에 따라 일요일을 설정. flagForSundayStart 가 1이면 일요일부터 시작임
			clsCalendar.add(Calendar.DATE, (flagForSundayStart == true ? 1 : 8) - clsCalendar.get(Calendar.DAY_OF_WEEK));
			mnapResult.put("SUN", clsSimpleDateFormat.format(clsCalendar.getTime()));
//			DESC : 토요일
			clsCalendar.add(Calendar.DATE, 7 - clsCalendar.get(Calendar.DAY_OF_WEEK));
			mnapResult.put("SAT", clsSimpleDateFormat.format(clsCalendar.getTime()));

		} catch (Exception Ex) {
			Ex.printStackTrace();
			return null;
		}
		return mnapResult;
	}
	public static String stringDateFormat(String dateString,String formatFrom, String formatTo) {
		return DateUtil.toString(DateUtil.toDate(formatFrom, dateString),formatTo);
	}
	public static Map<String,String> getGapOfWeek(Date dateFirst,Date dateLast,int baseDayOfWeek) {
//		DESC : 1-일요일,2-월요일
		int weekStartOfFirst	= DateUtil.getDayOfWeek(dateFirst	);
		int weekStartOfLast 	= DateUtil.getDayOfWeek(dateLast	);
		int gapOfCreated 		= baseDayOfWeek - weekStartOfFirst	;
		int gapOfThisDay 		= baseDayOfWeek - weekStartOfLast	;
//		CHECKME : 당일포함여부를 확인해야함.
		if(gapOfCreated > 0) gapOfCreated += -7;
		if(gapOfThisDay > 0) gapOfThisDay += -7;
//		DESC : 각 일자의 기준일자를 계산한다.
		Date baseDateInFirst = DateUtil.getCalendarCalculatedDate(dateFirst	,gapOfCreated,"yyyy-MM-dd",'D');
		Date baseDateInLast  = DateUtil.getCalendarCalculatedDate(dateLast	,gapOfThisDay,"yyyy-MM-dd",'D');
//		DESC : 전달받은 2날짜의 차리를 계산한다.
		int dateGap = DateUtil.getTimeGap(baseDateInLast, baseDateInFirst, 'D').intValue();
//		DESC : 결과를 설정하고 리턴한다.
		Map<String,String> mapResult = new LinkedHashMap<String,String>();
		mapResult.put("base"	,dayOfWeekS[baseDayOfWeek]);
		mapResult.put("start"	,DateUtil.toString(baseDateInFirst, "yyyy-MM-dd"));
		mapResult.put("terms"	,DateUtil.toString(baseDateInLast,"yyyy-MM-dd"));
		mapResult.put("weeks"	,Math.abs(dateGap/7) + "");
		return mapResult;
	}
	public static Calendar toCalendar(Date dateTarget) {
		Calendar clsCalendar = Calendar.getInstance();
		clsCalendar.setTime(dateTarget);
		return clsCalendar;
	}
	public static int getDayOfWeek(Date dateTarget) {
//		DESC : 요일을 숫자형으로 1 부터 7까지임
		Calendar clsCalendar = Calendar.getInstance();
		clsCalendar.setTime(dateTarget);
		return clsCalendar.get(Calendar.DAY_OF_WEEK);
	}
	public static String getDayOfWeekToString(Date dateTarget) {
//		DESC : 요일을 숫자형으로 1 부터 7까지임

		Calendar clsCalendar = Calendar.getInstance();
		clsCalendar.setTime(dateTarget);
		int dayOfWeek = clsCalendar.get(Calendar.DAY_OF_WEEK);
		return dayOfWeekS[dayOfWeek];
	}
	public static Date convertTimeStampToDate(long timestamp,String format) {
//		@SuppressWarnings("unused")
//		SimpleDateFormat clsSimpleDateFormat = new SimpleDateFormat(format, Locale.KOREA );
	    return new Date(timestamp);
	}
	public static String convertTimeStampToString(long timestamp,String format) {
//		 SimpleDateFormat clsSimpleDateFormat = new SimpleDateFormat(format, Locale.KOREA );
	     return DateUtil.toString(new Date(timestamp),format);
	}
//	public static Date convertTimeStampToString(long timestamp,String format) {
//		SimpleDateFormat clsSimpleDateFormat = new SimpleDateFormat(format, Locale.KOREA );
//		return new Date(timestamp);
//	}
	public static String convertExcelDate(int dayAfter1990,String format) {
		return DateUtil.getDateCalculated(DateUtil.toDate("yyyy-MM-dd","1900-01-01"),(dayAfter1990-2),format);
	}
	public static int getDayOfWeekIndex(Date dateValue,String formats) {
		LocalDate clsLocalDate = LocalDate.parse(DateUtil.toString(dateValue,formats), DateTimeFormatter.ofPattern(formats));
		return clsLocalDate.getDayOfWeek().getValue();
	}
	public static String convertExcelTime(double secondAfter0Rate,String format) {
		StringBuffer stringBuffer = new StringBuffer();
		int seconds = (int) (secondAfter0Rate*60*60*24);
		int hour =  seconds/3600;
		int min  =  Math.floorMod(seconds,3600)/60;
		int sec  =  Math.floorMod(Math.floorMod(seconds,3600),60);
		stringBuffer.append(hour).append(":").append(min).append(":").append(sec);
		return stringBuffer.toString();
	}
	public static Map<String,String> getThisDateString() throws Exception {
		Map<String,String> mapResult = new HashMap<String,String>();
		String strDate = DateUtil.getThisDateString("yyyyMMddHHmmss");
		mapResult.put("year"	,strDate.substring(0	,4	));
		mapResult.put("month"	,strDate.substring(4	,6	));
		mapResult.put("day"		,strDate.substring(6	,8	));
		mapResult.put("hour"	,strDate.substring(8	,10	));
		mapResult.put("minute"	,strDate.substring(10	,12	));
		mapResult.put("secode"	,strDate.substring(12	,14	));
		return mapResult;
	}
	public static String getDateCalculated(Date dateBase,int gap,String format) {
		return DateUtil.getCalendarCalculated(dateBase,gap,format,'D');
	}
	public static String getMonthCalculated(Date dateBase,int gap,String format) {
		return DateUtil.getCalendarCalculated(dateBase,gap,format,'M');
	}
	public static String getYearCalculated(Date dateBase,int gap,String format) {
		return DateUtil.getCalendarCalculated(dateBase,gap,format,'Y');
	}
	public static String getCalendarCalculated(Date dateBase,int gap,String format,char flag) {
		SimpleDateFormat clsSimpleDateFormat = new SimpleDateFormat(format);
		Calendar clsCalendar = Calendar.getInstance();
		clsCalendar.setTime(dateBase);
		switch(flag) {
			case 'm' : clsCalendar.add(Calendar.MINUTE 		,gap);	break;
			case 'H' : clsCalendar.add(Calendar.HOUR 		,gap);	break;
			case 'D' : clsCalendar.add(Calendar.DAY_OF_MONTH,gap);	break;
			case 'M' : clsCalendar.add(Calendar.MONTH		,gap);	break;
			case 'Y' : clsCalendar.add(Calendar.YEAR		,gap);	break;
		}
		return clsSimpleDateFormat.format(clsCalendar.getTime());
	}
	public static Date getCalendarCalculatedDate(Date dateBase,int gap,String format,char flag) {
		return DateUtil.toDate(format,DateUtil.getCalendarCalculated(dateBase,gap,format,flag));
	}
	public static BigDecimal getTimeGap(Date dateStart,Date dateTerms,char flag) {
		long startDateTime = dateStart.getTime();
		long termsDateTime = dateTerms.getTime();
		double ms = (termsDateTime - startDateTime);
		switch(flag) {
			case 'S' :	return new BigDecimal(ms/(1000			)).setScale(2,BigDecimal.ROUND_DOWN);
			case 'M' :	return new BigDecimal(ms/(1000*60		)).setScale(2,BigDecimal.ROUND_DOWN);
			case 'H' :	return new BigDecimal(ms/(1000*60*60	)).setScale(2,BigDecimal.ROUND_DOWN);
			case 'D' :	return new BigDecimal(ms/(1000*60*60*24	)).setScale(2,BigDecimal.ROUND_DOWN);
			default  :  return new BigDecimal(0);
		}
	}
	public static String getThisDateString(String strFormat) {
		Date dateToday = new Date();
	    Locale localeCurrent = new Locale("KOREAN", "KOREA");
	    if(Misc.isEmtyString(strFormat) == true) {
	    	strFormat = "yyyyMMddHHmmss";
	    }
	    SimpleDateFormat formatter = new SimpleDateFormat(strFormat, localeCurrent);
	    return formatter.format(dateToday);
	}
	public static Date getThisDate(String strFormat) {
		Date dateToday = new Date();
	    return dateToday;
	}
	public static Date getThisDate() {
		Date dateToday = new Date();
	    return dateToday;
	}
	public static java.sql.Date getThisSQLDate() {
		return new java.sql.Date(System.currentTimeMillis());
	}
	public static Date toDate(String strFormat,String strDate) {
		SimpleDateFormat format = new SimpleDateFormat(strFormat);
		try {
			return format.parse(strDate);
		} catch (ParseException e) {
			return null;
		}
	}
	public static String toString(Date dateDate,String strFormat) {
		try {
		    Locale localeCurrent = new Locale("KOREAN", "KOREA");
		    if(Misc.isEmtyString(strFormat) == true) {
		    	strFormat = "yyyyMMddHHmmss";
		    }
		    SimpleDateFormat formatter = new SimpleDateFormat(strFormat, localeCurrent);
		    return formatter.format(dateDate);
		} catch (Exception Ex) {
			return "";
		}
	}
	public static String toStringIfNUllToday(Date dateDate,String strFormat) {
		try {
		    Locale localeCurrent = new Locale("KOREAN", "KOREA");
		    if(dateDate == null ) dateDate = DateUtil.getThisDate();
		    if(Misc.isEmtyString(strFormat) == true) strFormat = "yyyyMMddHHmmss";
		    SimpleDateFormat formatter = new SimpleDateFormat(strFormat, localeCurrent);
		    return formatter.format(dateDate);
		} catch (Exception Ex) {
			return "";
		}
	}
	public static String toStringIfNUllBlank(Date dateDate,String strFormat) {
		try {
		    Locale localeCurrent = new Locale("KOREAN", "KOREA");
		    if(dateDate == null) return "";
		    if(Misc.isEmtyString(strFormat) == true) strFormat = "yyyyMMddHHmmss";
		    SimpleDateFormat formatter = new SimpleDateFormat(strFormat, localeCurrent);
		    return formatter.format(dateDate);
		} catch (Exception Ex) {
			return "";
		}
	}
}
