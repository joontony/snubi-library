/**************************************************************************************** 
 * File Name    : HttpUtilPost.java
 * Function     : 
 * Author       : mh.choi
 * Tester       : 
 * Page         : 
 * Target       : 
 * Description  : 
 * Modification Log
 * =============================================================== 
 * Ver  Date        Author     Modification
 * ===============================================================
   1.0  2018.05.28  mh.choi    Create
****************************************************************************************/
package org.snubi.lib.http;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import org.snubi.lib.json.JsonUtil;
import org.snubi.lib.misc.Misc;
import org.snubi.lib.response.SnubiResponse;
import org.snubi.lib.response.json.JsonToSnubiResponseResult;

public class HttpUtilPost<T> extends HttpUtil {
	public SnubiResponse post(T clsParameter) throws Exception {
		JsonUtil<T> clsJsonUtil = new JsonUtil<T>(); 
		return this.post(clsJsonUtil.toString(clsParameter));
	}
	
	@Override
	public SnubiResponse post(String strBody) throws Exception {
		StringBuffer sbufferBuffer = new StringBuffer();
		String strBuffer = new String();
		OutputStream clsOutputStream = null;
	    if(Misc.isEmtyString(this.getStrUrl()) == true) {
	    	throw new Exception("접속할 URL 주소가 지정되지 않았습니다.");
	    }
	    try {
	    	clsURL = new URL(this.getStrUrl());
	 	    clsHttpURLConnection = (HttpURLConnection)clsURL.openConnection();
	 	    clsHttpURLConnection.setRequestProperty("Content-Type", this.getStrType());
	 	    clsHttpURLConnection.setRequestMethod("POST");
	 	    clsHttpURLConnection.setDoOutput(true);
	 	    if(Misc.isEmtyString(this.getStrAuth()) == false) {
	 	    	clsHttpURLConnection.setRequestProperty("Authorization", this.getStrTokenType() + " " + this.getStrAuth());
	 	    }
	 	    clsHttpURLConnection.connect();
	 	    clsOutputStream = clsHttpURLConnection.getOutputStream();
	 	    clsOutputStream.write(strBody.getBytes(this.getStrCharset()));	   
	 	    clsOutputStream.flush();
	 	    clsOutputStream.close();				
	 	    clsBufferedReader = new BufferedReader(new InputStreamReader(clsHttpURLConnection.getInputStream(),this.getStrCharset()));
	 	    while ((strBuffer = clsBufferedReader.readLine()) != null) {
	 	    	sbufferBuffer.append(strBuffer);
	 	    }
	 	    JsonToSnubiResponseResult clsJsonToSnubiResponseResult = new JsonToSnubiResponseResult();
	 	    clsJsonToSnubiResponseResult.get(sbufferBuffer.toString());
	 	    return clsJsonToSnubiResponseResult.getClsSnubiResponse();
	    } catch(Exception Ex) {
	    	throw Ex;
	    } finally {
	    	try {clsOutputStream.close();         	} catch(Exception Ex) {}
	 	    try {clsBufferedReader.close();         } catch(Exception Ex) {}
	 	    try {clsHttpURLConnection.disconnect();	} catch(Exception Ex) {}
	    }
	}
	@Override
	public SnubiResponse get() throws Exception {
		throw new Exception("지원하지 않는 method");
	}	
}
